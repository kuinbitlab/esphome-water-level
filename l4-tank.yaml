esphome:
  name: l4-tank
  includes:
    - cs_l4_tank.h
  libraries:
    - "denyssene/SimpleKalmanFilter"
    
esp8266:
  board: d1_mini

# Enable logging
logger:
  level: info

# Enable Home Assistant API
api:
  encryption:
    key: "oMf8xxxx"

ota:
  password: "12b1xxxx"

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
    bssid: 10:27:xxxx
  reboot_timeout: 0s
  power_save_mode: high
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "L4-Tank Fallback Hotspot"
    password: "cZZKxxxx"
#  use_address: 192.168xxxx
  
captive_portal:
    
switch:
  - platform: restart
    name: "l4-tank_module"

globals:
  - id: ping_v
    type: float
    restore_value: no
    initial_value: '0'
    
  - id: error_v
    type: int
    restore_value: no
    initial_value: '-1'

dallas:
  - pin: D7
    update_interval: 15s
    
sensor:
  - platform: uptime
    name: l4-tank_uptime
    id: uptime_sensor
    update_interval: 60s
    
  - platform: dallas
    address: 0x17020b9177583c28
    name: l4-tank_temp
    resolution: 10
    id: temp_sensor
    filters:
      - median:
          window_size: 3
          send_every: 1

  - platform: ultrasonic
    trigger_pin: D5
    echo_pin: D6
    pulse_time: 20us
    id: ping_sensor
    name: l4-tank_ultrasonic
    internal: true
    accuracy_decimals: 4
    update_interval: 100ms
    unit_of_measurement: cm
    filters:
      - lambda: |-
          float ping_t = id(ping_sensor).raw_state * 100;
          float temp_t = id(temp_sensor).state;

          if (ping_t > 21.5 && ping_t < 132 && temp_t > -10 && temp_t < 70) {
            id(error_v) = 0;
            id(ping_v) = ping_t / 343.0 * (331.3 + 0.606 * temp_t);
            return id(ping_v);
          } else if (ping_t > 21.5 && ping_t < 132) {
            id(error_v) = 1;
            id(ping_v) = ping_t;
            return id(ping_v);
          } else if (ping_t > 0 && ping_t < 21) {
            id(error_v) = 2;
            return NAN;
          } else {
            id(error_v) = 3;
            return NAN;
          }
      - max:
      - median:
    on_raw_value:
      then:
        - lambda: |-
            static int tmp_c, tmp_p;
            tmp_c = id(error_v);
            if (tmp_c != tmp_p) {
              char tmp_str[10];
              sprintf(tmp_str,"0xe%i",tmp_c);
              id(error_code).publish_state(tmp_str);
              tmp_p = tmp_c;
            }

  - platform: template
    name: l4-tank_litre
    id: litre
    lambda: |-
        if (abs(id(ping_sensor).state - id(ping_v)) < 5) {
          return (MAX_HEIGHT - kalmanFilter.updateEstimate(id(ping_v))) / DIVIDE_RATIO * MULTIPLY_RATIO;
        } else {
          return NAN;
        }
    filters:
      - lambda: |-
          float tmp = x;
          if (tmp >= 0 && tmp <= 916) {
            return tmp;
          } else {
            return {};
          }
      - heartbeat: 1s
    accuracy_decimals: 0
    update_interval: 100ms
    unit_of_measurement: L
    state_class: measurement
    icon: mdi:water
            
  - platform: template
    name: l4-tank_flow
    lambda: |-
      static float pl;
      float tmp = id(litre).state;
      float flow_rate = (tmp - pl);
      pl = tmp;
      return flow_rate;
    filters:
      - lambda: |-
          float tmp = x;
          if (tmp > -20 && tmp < 50) {
            return tmp;
          } else {
            return 0.0;
          }
    update_interval: 1min
    accuracy_decimals: 0
    unit_of_measurement: L
    icon: mdi:chart-bar-stacked
    state_class: measurement

text_sensor:
  - platform: template
    name: l4-tank_error_code
    id: error_code
    icon: mdi:alert-octagon-outline
  #  accuracy_decimals: 0
    update_interval: never

binary_sensor:
  - platform: template
    name: l4-tank_sensor
    lambda: |-
      if (id(error_v) == 0){
        return false;
      } else {
        return true;
      }
    filters:
      - delayed_on_off: 1s
    device_class: problem

#debug input
number:
  - platform: template
    name: "l4-tank_slider"
    id: slider1
    optimistic: true
    min_value: -1
    max_value: 2
    step: 0.01
    mode: box
